Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        d={target-n:i for i,n in enumerate(nums)}
        for i in range(0,len(nums)-1):
            if nums[i] in d and i!=d[nums[i]]:
                return [i,d[nums[i]]]

Given an integer x, return true if x is a 
palindrome
, and false otherwise.

class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if x<0:
            return False
        lst=[]
        while x!=0:
            digit=x%10
            lst.append(digit)
            x=x//10
        if lst==list(reversed(lst)):
            return True
        else:
            return False

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.

class Solution(object):

    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        def string_sub(s, symbol):
            if s.endswith(symbol):
                return s[:-(len(symbol))]
            return s
        ans=0
        string=''
        value=[1,4,5,9,10,40,50,90,100,400,500,900,1000]
        three_symbol_nums = {
            "III": 3, "XXX": 30, ...
        }
        two_symbol_nums = {
            ...
        }
        one_sym


        symbol=['I','IV','V','IX','X','XL','L','XC','C','CD','D','CM','M']
        d={symbol[i]:value[i] for i in range(len(symbol))}
        for element in symbol:
            for i in [3, 2, 1]:
                print(element*i, s, ans)
                if s.endswith(element*i):
                    ans+=d[element]*i
                    s=string_sub(s,element*i)
        return ans

Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

class Solution(object):
    def longestCommonPrefix(self, strs):
        """
        :type strs: List[str]
        :rtype: str
        """
        ans=''
        i=0
        if len(strs)>1:
            while i<min([len(element) for element in strs]):
                print(i)
                lst=[]
                j=0
                for string in strs:
                    if string!='':
                        lst.append(string[i])
                    else:
                        return ''
                while j+1 <len(lst):
                    print(j)
                    if lst[j]==lst[j+1]:
                        j+=1
                    else:
                        return ans
                if j==len(lst)-1:
                    ans+=lst[j]
                i+=1
            return ans
        else:
            return strs[0]

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        if s == '':
            return True
        if len(s) % 2 != 0:
            return False
        new_str = s.replace('()', '').replace('[]', '').replace('{}', '')
        if new_str == s:
            return False
        return self.isValid(new_str)

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        for i in range(len(nums1)):
            if i>=m:
                nums1[i]=nums2[i-m]
        nums1=nums1.sort()

Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.

class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        lst=[]
        i=0
        while i in range(len(nums)):
            if nums[i] in lst:
                nums.pop(i)
                i=i-1
            lst.append(nums[i])
            i+=1
        return len(nums)

Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.

Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
Return k.

class Solution(object):
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        i=0
        while i in range(len(nums)):
            if nums[i]==val:
                nums.pop(i)
                i=i-1
            i+=1
        return len(nums)

Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        if needle in haystack:
            i=0
            j=0
            empty_string=''
            while i<=len(haystack)-len(needle):
                print(i)
                j=i
                while j in range(i,len(needle)+i):
                    print(j)
                    empty_string+=haystack[j]
                    j+=1
                if empty_string==needle:
                    return i
                i+=1
                empty_string=''
        else:
            return -1

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        return self.helper(nums, target, 0)

    def helper(self, nums, target, nums_start_index):
        if len(nums) == 0:
            return nums_start_index
        middle_index = len(nums) // 2
        if nums[middle_index] == target:
            return middle_index + nums_start_index
        if nums[middle_index] > target:
            nums = nums[:middle_index]
            return self.helper(nums, target, nums_start_index)
        if nums[middle_index] < target:
            nums = nums[middle_index+1:]
            next_num_start_index = nums_start_index + middle_index + 1
            return self.helper(nums, target, next_num_start_index)

Given a string s consisting of words and spaces, return the length of the last word in the string.

A word is a maximal 
substring
 consisting of non-space characters only.

class Solution(object):
    def lengthOfLastWord(self, s):
        """
        :type s: str
        :rtype: int
        """
        alphabet=['A','a','B','b','C','c','D','d','E','e','F','f','G','g','H','h','I','i','J','j','K','k','L','l','M','m','N','n','O','o','P','p','Q','q','R','r','S','s','T','t','U','u','V','v','W','w','X','x','Y','y','Z','z']
        count=0
        while s.endswith(' '):
            s=s[:len(s)-1]
            print(s)
        for i in range(len(s)):
            if s[i] not in alphabet:
                count=0
            else:
                count+=1
        return count

You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

class Solution(object):
    def plusOne(self, digits):
        """
        :type digits: List[int]
        :rtype: List[int]
        """
        empty_string=''
        for element in digits:
            empty_string+=str(element)
        integer=int(empty_string)
        integer+=1
        string=str(integer)
        lst=[]
        for i in range(len(string)):
            lst.append(int(string[i]))
        return lst

Given a 0-indexed integer array nums of length n and an integer target, return the number of pairs (i, j) where 0 <= i < j < n and nums[i] + nums[j] < target.

class Solution(object):
    def countPairs(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        count = 0
        nums = sorted(nums)
        for i in range(len(nums) - 1):
            rest = nums[i+1:]
            middle_index = len(rest) // 2
            while len(rest) != 0:
                if nums[i] + rest[middle_index] >= target: 
                    rest = rest[:middle_index]
                    middle_index = len(rest) // 2
                else:
                    count += middle_index + 1
                    rest = rest[middle_index + 1:] 
                    middle_index = len(rest) // 2
        return count

Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.

class Solution(object):
    def countNegatives(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        lst = []
        m = len(grid)
        n = len(grid[0])
        i = m - 1
        j = 0
        count = 0
        while i >= 0 and j < n:
            if grid[i][j] >= 0:
                j += 1
            else:
                count += n - j
                i -= 1
        return count

You are given a 0-indexed integer array nums and a target element target.

A target index is an index i such that nums[i] == target.

Return a list of the target indices of nums after sorting nums in non-decreasing order. If there are no target indices, return an empty list. The returned list must be sorted in increasing order.

class Solution(object):
    def targetIndices(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        nums = sorted(nums)
        return sorted(self.helper(nums, target, 0))

    def helper(self, nums, target, start_index):
        if len(nums) == 0:
            return []
        middle_index = len(nums) // 2
        if nums[middle_index] == target:
            return [middle_index + start_index] + self.helper(nums[:middle_index], target, start_index) + self.helper(nums[middle_index + 1:], target, start_index + middle_index + 1)
        if nums[middle_index] > target:
            return self.helper(nums[:middle_index], target, start_index)
        if nums[middle_index] < target:
            return self.helper(nums[middle_index + 1:], target, start_index + middle_index + 1)

Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

You must not use any built-in exponent function or operator.

For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.

class Solution(object):
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """

        return self.helper(x, 0, x)

    def helper(self, upper, lower, x):
        mid_point = upper - (upper - lower) // 2
        if mid_point * mid_point < x:
            if (mid_point + 1) * (mid_point + 1) > x:
                return mid_point
            lower = mid_point
            return self.helper(upper, lower, x)
        if mid_point * mid_point == x:
            return mid_point
        if mid_point * mid_point > x:
            if (mid_point - 1) * (mid_point - 1) < x:
                return mid_point - 1
            upper = mid_point
            return self.helper(upper, lower, x)

Given two binary strings a and b, return their sum as a binary string.

class Solution(object):
    def addBinary(self, a, b):
        """
        :type a: str
        :type b: str
        :rtype: str
        """
        int_a = int(a)
        int_b = int(b)
        res = int_a + int_b
        count = 0
        coefficient = 10 ** count
        divisor = 10 
        ans = 2
        digit = len(str(res))
        while count <= digit:
            print(res)
            if str(res % divisor).startswith('6'):
                res -= 5 * coefficient
                if count < digit:
                    res += 2 * coefficient * 10
            if str(res % divisor).startswith('5'):
                res -= 4 * coefficient
                if count < digit:
                    res += 2 * coefficient * 10
            if str(res % divisor).startswith('4'):
                res -= 3 * coefficient
                if count < digit:
                    res +=  coefficient * 10
            if str(res % divisor).startswith('3'):
                res -= 2 * coefficient
                if count < digit:
                    res += coefficient * 10
            if str(res % divisor).startswith('2'):
                res += 8 * coefficient
                count += 1
                coefficient = 10 ** count
                divisor *= 10
            else:    
                count += 1
                coefficient = 10 ** count
                divisor *= 10
        res = str(res)
        return res

Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None:
            return None
        lst = [head.val]
        res = cur = ListNode(head.val)
        while head:
            print(lst)
            if head.val not in lst:
                lst.append(head.val)
                cur.next = head
                cur = cur.next
            if head.next is None:
                cur.next = None
            head = head.next
        return res
